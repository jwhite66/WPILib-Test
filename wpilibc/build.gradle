apply plugin: 'cpp'
apply plugin: 'google-test'
apply plugin: 'visual-studio'
apply plugin: 'edu.wpi.first.NativeUtils'


apply from: '../config.gradle'

model {
    dependencyConfigs {
        wpiutil(DependencyConfig) {
            groupId = 'edu.wpi.first.wpiutil'
            artifactId = 'wpiutil-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ wpilibc: [],
                              wpilibcTestingBase: [],
                              wpilibcDev: [] ]
        }
        ntcore(DependencyConfig) {
            groupId = 'edu.wpi.first.ntcore'
            artifactId = 'ntcore-cpp'
            headerClassifier = 'headers'
            ext = 'zip'
            version = '+'
            sharedConfigs = [ wpilibc: [],
                              wpilibcTestingBase: [],
                              wpilibcDev: [] ]
        }
    }
    exportsConfigs {
        wpilibc(ExportsConfig) {
            x86ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
            x64ExcludeSymbols = [ '_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                  '_CT??_R0?AVbad_cast',
                                  '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                  '_TI5?AVfailure' ]
        }
    }
    components {
        wpilibc(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs = [ 'src/main/native/cpp' ]
                        includes = ["**/*.cpp"]
                    }
                    exportedHeaders {
                        srcDirs = ["src/main/native/include"]
                    }
                }
            }
        }
        // The TestingBase library is a workaround for an issue with the GoogleTest plugin.
        // The plugin by default will rebuild the entire test source set, which increases
        // build time. By testing an empty library, and then just linking the already built component
        // into the test, we save the extra build
        wpilibcTestingBase(NativeLibrarySpec) { }
        // By default, a development executable will be generated. This is to help the case of 
        // testing specific functionality of the library.
        if (!project.hasProperty('skipDevExe')) {
            wpilibcDev(NativeExecutableSpec) {
                binaries.all {
                    lib library: 'wpilibc', linkage: 'shared'
                }
                sources {
                    cpp {
                        source {
                            srcDirs 'src/dev/native/cpp'
                            include '**/*.cpp'
                        }
                        exportedHeaders {
                            srcDirs 'src/dev/native/include'
                        }
                    }
                }
            }
        }
    }
    testSuites {
        wpilibcTestingBaseTest {
            sources {
                cpp.source.srcDir 'src/test/native/cpp'
                cpp.exportedHeaders.srcDir 'src/test/native/include'
            }
        }
    }
    binaries {
        all {
            project(':hal').addHalCompilerArguments(it)
            project(':ni-libraries').addNiLibrariesToLinker(it)
            project(':hal').addHalToLinker(it)
            cppCompiler.args "-DNAMESPACED_WPILIB"
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            if (it.component.testedComponent.name.contains('TestingBase')) {
                lib project: ':gmock', library: 'gmock', linkage: 'static'
                lib library: 'wpilibc', linkage: 'shared'
            } else {
                it.buildable = false
            }
        }
    }
}

apply from: 'publish.gradle'